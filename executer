#!/bin/sh

# First argument's the file to run, second the workspace path, third the env var file
[ ! -s "$1" ] && exit 1
[ -s "$3" ] && [ -f "$3" ] && ENVIRON_FLAG=--variables-file && INCLUDED_ENVIRON="$3" 
included="$(grep "^#include " "$1" | sed "s/^#include //")"
[ -z "$included" ] || [ -f "$included.hurl" ] || notify-send " File $included not included" "No such file 󱀷 "
OUTPUT=$(cat "$included.hurl" "$1" | hurl -L ${ENVIRON_FLAG:+"$ENVIRON_FLAG"} ${INCLUDED_ENVIRON:+"$INCLUDED_ENVIRON"} -i 2>&1)
HTTP_HEADERS=$(echo "$OUTPUT" | awk -v RS="" 'NR==1 {print $0}')
RESPONSE_BODY=$(echo "$OUTPUT" | awk -v RS="" 'NR>1 {print $0}')
FIRST_LINE=$(echo "$HTTP_HEADERS" | awk 'NR==1 {print}')

case "$FIRST_LINE" in
    *"error"*) 
        FIRST_LINE='Http error' ;;
esac

EXTENSION=$(echo "$RESPONSE_BODY" | file --mime-type -b - | sed 's/.*\///')

RELPATH=$(realpath --relative-to="$2" "$1")
DESTFOLDER="$OUTPUT_BASE/${RELPATH%.*}"

[ ! -d  "$DESTFOLDER" ] && mkdir -p "$DESTFOLDER"
DEST="$DESTFOLDER/$(date +%H:%M:%SD%d-%m-%Y).$EXTENSION"

if [ $EXTENSION = "json" ]; then
    echo "$RESPONSE_BODY" | jq . > "$DEST" 
elif [ $EXTENSION = "octet-stream" ]; then
    echo "$HTTP_HEADERS $RESPONSE_BODY" > "$DEST" 
else
    echo "$RESPONSE_BODY" > "$DEST"
fi
nvim --server $LISTEN_ADDRESS --remote-send "<cmd>lua require('panels.output'):receive_output('$DEST','$FIRST_LINE')<CR>"
